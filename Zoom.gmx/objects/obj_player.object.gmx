<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Member variables
x_accel = 0;
y_accel = 0;
x_vel = 0;
y_vel = 0;
in_collision = false;
can_jump = true;
dash_count = global.MAX_DASHES;

arrow_id = instance_create(x, y, obj_player_arrow);
arrow_id.attached_id = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Key press
var move_left = keyboard_check(global.KEY_MOVE_LEFT);
var move_right = keyboard_check(global.KEY_MOVE_RIGHT);
var jump_pressed = keyboard_check_pressed(global.KEY_JUMP);
var dash_pressed = keyboard_check_pressed(global.KEY_DASH);

// Misc vars
var move_dir = sign(x_vel);

// Acceleration updates
//if (place_meeting(x, y, obj_platform)) // Apply friction
//{
    /*
    var accel_mag = l2_norm(x_accel, y_accel);
    var accel_dir = arctan2(y_accel, x_accel);
    x_accel += accel_mag * global.ACCEL_FRICTION_MULT * cos(accel_dir + pi);
    y_accel += accel_mag * global.ACCEL_FRICTION_MULT * sin(accel_dir + pi);
    */
    x_accel = sign(x_vel) * global.ACCEL_FRICTION_MULT;
//}

if (move_left)
{
    x_accel = -global.ACCEL_MOVE;
}

if (move_right)
{
    x_accel = global.ACCEL_MOVE;
}

if (!place_meeting(x, y, obj_platform)) // not colliding with a platform object
{
    y_accel = -global.ACCEL_GRAV;
    in_collision = false;
}
else // colliding with a platform
{
       
}

// Velocity updates
if (l2_norm((x_vel + x_accel), y_vel) &lt;= global.VEL_MAX)
{
    x_vel += x_accel;
}

if (l2_norm(abs(y_vel + y_accel), x_vel) &lt;= global.VEL_MAX)
{
    y_vel += y_accel;
}
if (jump_pressed &amp;&amp; can_jump) // jump
{
    var y_vel_max = sqrt(sqr(global.VEL_MAX) - sqr(x_vel));
    y_vel += global.VEL_JUMP_INC;
    if (y_vel &gt; y_vel_max)
    {
        y_vel = y_vel_max;
    }
    
    can_jump = false;
}
/*
if (abs(x_vel) &lt; global.VEL_DEADBAND) // Velocity deadband
{
    x_vel = 0;
}
if (abs(y_vel) &lt; global.VEL_DEADBAND) // Velocity deadband
{
    y_vel = 0;
}
*/

// Position updates (Flip y coordinates here, thus moving down INCREASES y)
if (!in_collision || !place_meeting(x + x_vel, y, obj_platform))
{
    x += x_vel;
}

if (!in_collision || !place_meeting(x, y - y_vel, obj_platform))
{
    y -= y_vel; // lower y means higher on the screen
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!in_collision)
{
    while (position_meeting(x + sign(x_vel) * (sprite_width / 2.0 + abs(x_vel)), y - y_vel, obj_platform))
    {
        x -= sign(x_vel);
    }
    while (position_meeting(x + x_vel, y - sign(y_vel) * (sprite_height / 2.0 + abs(y_vel)), obj_platform))
    {
        y += sign(y_vel);
    }

    var col_dir = point_direction(x, y, other.x, other.y);
    var col_lr = abs(dsin(col_dir)) * 2 - 1; // -1 if horizontal collision
    var col_ud = abs(dcos(col_dir)) * 2 - 1; // -1 if vertical collision
    
    // Apply energy loss on collision
    x_vel *= 1 - global.VEL_LOSS;
    y_vel *= 1 - global.VEL_LOSS;
    if (abs(x_vel) &lt;= global.VEL_DEADBAND)
    {
        x_vel = 0;
    }
    if (abs(y_vel) &lt;= global.VEL_DEADBAND)
    {
        y_vel = 0;
    }
        
    x_vel = sign(col_lr) * x_vel;
    y_vel = sign(col_ud) * y_vel;
    
    /*
    // Dig out of ground
    if (col_lr == -1)
    {
        while (position_meeting(x - sign(x_vel) * sprite_width / 2, y - y_vel, obj_platform))
        {
            x += sign(x_vel);
        }
    }
    else if (col_ud == -1)
    {
        while (position_meeting(x + x_vel, y + sign(y_vel) * sprite_height / 2, obj_platform))
        {
            y -= sign(y_vel);
        }
    }
    else
    {

    }
    */
    
    can_jump = true;
    dash_count = global.MAX_DASHES;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Debug */
//draw_text(0, 0, x_accel);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
